---
import { getDisciplineName } from "../../utils/discipline";
import { colors } from "../../utils/colors";
import CardWrapper from "../CardWrapper.astro";
import Talk from "../Talk.astro";
import { FavoriteButton } from "../button/favoriteButton/FavoriteButton";
import Discipline from "../Discipline.astro";
import {
  getBorderColor,
  getCardColumn,
  getColorPair,
  getTalkDescription,
  getLocation,
  getSpeaker,
  isTalk,
} from "./functions";
import RenderSpeakerImage from "./RenderSpeakerImage.astro";
import type { ScheduleEntry } from "../../utils/schedule/types";
import Description from "../Description.astro";

interface Props {
  event: ScheduleEntry;
  span: number;
}

const { event, span } = Astro.props;
const { id, title, to, from } = event;

const speaker = getSpeaker(event);
const location = getLocation(event);
const colorPair = getColorPair(event);
const talkDescription = getTalkDescription(event);
const borderColor = getBorderColor(colorPair);
const column = getCardColumn(colorPair);

const shouldRenderDescription = span > 1;
---

<CardWrapper
  id={id}
  borderColor={borderColor ? borderColor : colors.text.primary}
  span={span}
  column={column}
>
  <div class="speaker_card__wrapper">
    {
      isTalk(event) ? (
        <a href={`talks/${id}`} class="speaker_card__link">
          {speaker && <RenderSpeakerImage speakerName={speaker} />}
          <Talk speakerName={speaker} title={title} />
        </a>
      ) : (
        <>
          {speaker && <RenderSpeakerImage speakerName={speaker} />}
          <Talk speakerName={speaker} title={title} />
        </>
      )
    }

    <Description
      talkDescription={talkDescription}
      displayCondition={shouldRenderDescription}
    />
    <div class="speaker_card__flex">
      <div class="speaker_card__flex__labels">
        <Discipline>{`${location} ${from}-${to}`}</Discipline>
        {
          event.type === "talk" && speaker && (
            <Discipline colorPair={colorPair}>
              {getDisciplineName(event.discipline)}
            </Discipline>
          )
        }
      </div>
      <FavoriteButton client:load id={id} title={title} />
    </div>
  </div>
</CardWrapper>

<style is:global>
  .speaker_card__wrapper {
    height: 100%;
    display: grid;
    grid-template-areas:
      "img"
      "location"
      "description";

    gap: var(--Padding-m);
    grid-auto-rows: min-content; /* Makes rows only as tall as their content */

    container-type: inline-size;
    container-name: cardContent;
  }

  .speaker_card__wrapper:not(:has(.render_speaker_image__speaker_img))
    .talk__text {
    background-color: var(--background-dark);
    color: var(--text-primary-on-dark);
  }

  .speaker_card__wrapper:not(:has(.render_speaker_image__speaker_img)) .talk {
    max-width: 100%;
  }

  .speaker_card__link {
    display: grid;
  }

  .talk {
    grid-area: img;
    align-self: end;
  }

  .speaker_card__flex {
    grid-area: location;
    display: flex;
    height: fit-content;
    align-items: end;
    align-self: end;
    justify-content: space-between;
  }

  .speaker_card__flex__labels {
    display: flex;
    flex-wrap: wrap;
    gap: 0.25rem;
  }

  @container (width > 650px) {
    .speaker_card__wrapper:has(img) .talk__text {
      font-size: var(--Font-size-H2);
      line-height: var(--Line-Height-H2);
    }

    .speaker_card__wrapper:has(img) .talk {
      max-width: 650px;
    }
  }

  @container (width < 650px) {
    .speaker_card__wrapper:has(img) .talk {
      max-width: 285px;
    }
  }
</style>
