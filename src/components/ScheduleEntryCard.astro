---
import { colors } from "../utils/colors";
import { getDisciplineColorPair, getDisciplineName } from "../utils/discipline";
import { getColumn } from "../utils/getColumm";
import type { ScheduleEntry } from "../utils/schedule";
import { getSpeakerImageSrc } from "../utils/speakerImages";
import { FavoriteButton } from "./button/favoriteButton/FavoriteButton";
import CardWrapper from "./CardWrapper.astro";
import Discipline from "./Discipline.astro";
import Talk from "./Talk.astro";
import { Image } from "astro:assets";

interface Props {
  event: ScheduleEntry;
  span: number;
}

const { event, span } = Astro.props;
const { id, title, to, from } = event;

const speaker = event.type !== "break" ? event.speaker : undefined;
const location = event.type !== "break" ? event.location : "";

const formattedNames =
  event.type !== "break" && event.speaker
    ? event.speaker.split(" & ")
    : undefined;

const colorPair =
  event.type === "talk" ? getDisciplineColorPair(event.discipline) : undefined;

const borderColor =
  colorPair?.color === colors.teal100 ? colors.tealDark : colorPair?.color;

const column = colorPair ? getColumn(colorPair) : "unset";
---

<CardWrapper
  id={id}
  borderColor={borderColor ? borderColor : colors.text.primary}
  span={span}
  column={column}
>
  <div class="speaker_card__wrapper">
    <div class="speaker_card__img_flex">
      {
        formattedNames &&
          formattedNames.map((name) => {
            const imgSrc = getSpeakerImageSrc(name);
            if (imgSrc) {
              return (
                <Image
                  class="speaker_card__speaker_img"
                  layout="responsive"
                  src={imgSrc.src}
                  alt=""
                />
              );
            }
          })
      }
    </div>
    <Talk speakerName={speaker} title={title} />
    {
      span > 1 && (
        <div class="speaker_card__description">
      <!-- TODO: Add Description for talk if span over multiple rows -->
        </div>
      )
    }
    <div class="speaker_card__flex">
      <div class="speaker_card__flex__labels">
        <Discipline>{`${location} ${from}-${to}`}</Discipline>
        {
          event.type === "talk" && speaker && (
            <Discipline colorPair={colorPair}>
              {getDisciplineName(event.discipline)}
            </Discipline>
          )
        }
      </div>
      <FavoriteButton client:load id={id} title={title} />
    </div>
  </div>
</CardWrapper>

<style is:global>
  .speaker_card__wrapper {
    height: 100%;
    display: grid;
    grid-template-areas:
      "img"
      "location"
      "description";

    gap: var(--Padding-m);
    grid-auto-rows: min-content; /* Makes rows only as tall as their content */

    container-type: inline-size;
    container-name: cardContent;
  }

  .speaker_card__wrapper:not(:has(.speaker_card__speaker_img)) .talk__text {
    background-color: var(--background-dark);
    color: var(--text-primary-on-dark);
  }

  .speaker_card__wrapper:not(:has(.speaker_card__speaker_img)) .talk {
    max-width: 100%;
  }

  .talk {
    grid-area: img;
    align-self: end;
  }

  .speaker_card__speaker_img {
    overflow: hidden;
    width: 100%;
    aspect-ratio: 1/1;
    object-fit: cover;
    border-radius: 10px;
  }

  .speaker_card__img_flex {
    grid-area: img;
    justify-self: end;
    display: flex;

    max-width: 338px;

    > img {
      height: 355px;
    }
  }

  .speaker_card__description {
    grid-area: description;

    & > p {
      color: var(--text-tertiary);
      line-height: var(--Line-height-Body-Small);
      letter-spacing: 0.01125rem;
    }
  }

  .speaker_card__flex {
    grid-area: location;
    display: flex;
    height: fit-content;
    align-items: end;
    align-self: end;
    justify-content: space-between;
  }

  .speaker_card__flex__labels {
    display: flex;
    flex-wrap: wrap;
    gap: 0.25rem;
  }

  @container (width > 650px) {
    .speaker_card__wrapper:has(img) .talk__text {
      font-size: var(--Font-size-H2);
      line-height: var(--Line-Height-H2);
    }

    .speaker_card__wrapper:has(img) .talk {
      max-width: 650px;
    }
  }

  @container (width < 650px) {
    .speaker_card__wrapper:has(img) .talk {
      max-width: 285px;
    }
  }
</style>
