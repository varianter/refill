---
import { colors, type ColorPair } from "../utils/colors";
import { FavoriteButton } from "./button/favoriteButton/FavoriteButton";
import CardWrapper from "./CardWrapper.vue";
import Discipline from "./Discipline.astro";
import Talk from "./Talk.astro";

interface Props {
  id: string;
  speakerName?: string;
  talk: string;
  colorPair?: ColorPair;
  discipline: string;
}

const { id, speakerName, talk, colorPair, discipline } = Astro.props;

const formattedNames = speakerName
  ? speakerName.split(" & ").map((name) => name.split(" ").join("-"))
  : undefined;

const borderColor =
  colorPair?.color === colors.teal100 ? colors.tealDark : colorPair?.color;

function getDiscipline() {
  if (colorPair?.color === colors.orange) {
    return "Design";
  } else if (colorPair?.color === colors.darkBlue) {
    return "Development";
  } else {
    return "Strategy & product";
  }
}
---

<CardWrapper
  id={id}
  borderColor={borderColor ? borderColor : colors.text.primary}
  height={speakerName ? "398px" : "auto"}
>
  <div class="speaker_card__wrapper">
    <div class="speaker_card__img_flex">
      {
        formattedNames &&
          formattedNames.map((name) => {
            //TODO: Get img from chewbacca
            // const imgSrc = `/assets/img/people/${name}.jpg`;
            // const altText = name.replaceAll("-", " ");
            const imgSrc = "";
            return (
              <img class="speaker_card__speaker_img" />
              // <img class="speaker_card__speaker_img" src={imgSrc} alt="" />
            );
          })
      }
    </div>
    <Talk speakerName={speakerName} talk={talk} />
    <div class="speaker_card__flex">
      <div class="speaker_card__flex__labels">
        <Discipline>{discipline}</Discipline>
        {
          speakerName && (
            <Discipline colorPair={colorPair}>{getDiscipline()}</Discipline>
          )
        }
      </div>
      <FavoriteButton client:load id={id} />
    </div>
  </div>
</CardWrapper>

<style is:global>
  .speaker_card__wrapper {
    display: grid;
    grid-template-areas:
      "img"
      "location";
    gap: var(--Padding-m);

    container-type: inline-size;
    container-name: cardContent;
  }

  .speaker_card__wrapper:not(:has(.speaker_card__speaker_img)) .talk__text {
    background-color: var(--background-dark);
    color: var(--text-primary-on-dark);
  }

  .speaker_card__wrapper:not(:has(.speaker_card__speaker_img)) .talk {
    max-width: 100%;
  }

  .talk {
    grid-area: img;
    align-self: end;
  }

  .speaker_card__speaker_img {
    overflow: hidden;
    width: 100%;
    aspect-ratio: 1/1;
    object-fit: cover;
  }

  .speaker_card__img_flex {
    grid-area: img;
    justify-self: end;
    display: flex;

    max-width: 338px;
  }

  .speaker_card__flex {
    grid-area: location;
    display: flex;
    height: fit-content;
    align-items: end;
    justify-content: space-between;
  }

  .speaker_card__flex__labels {
    display: flex;
    flex-wrap: wrap;
    gap: 0.25rem;
  }

  @container (width > 650px) {
    .speaker_card__wrapper:has(img) .talk__text {
      font-size: var(--Font-size-H2);
    }

    .speaker_card__wrapper:has(img) .talk {
      max-width: 650px;
    }
  }

  @container (width < 650px) {
    .speaker_card__wrapper:has(img) .talk {
      max-width: 285px;
    }
  }
</style>
