---
import {
  type Description,
  type DescriptionList,
} from "../utils/schedule/types";
interface Props {
  talkDescription: DescriptionList;
  displayCondition?: boolean;
  descriptionType?: "card" | "normal";
}

const {
  talkDescription,
  displayCondition = true,
  descriptionType = "card",
} = Astro.props;

function shouldShowDescription() {
  return displayCondition && talkDescription.length > 0;
}

function isParagraph(descriptionParagraph: Description) {
  return typeof descriptionParagraph === "string";
}

const className =
  descriptionType === "card" ? "description__card" : "description__normal";
---

{
  shouldShowDescription() && (
    <div class={`description ${className}`}>
      {talkDescription.map((descriptionParagraph) => {
        if (isParagraph(descriptionParagraph)) {
          return <p>{descriptionParagraph}</p>;
        } else {
          return (
            <div class="description__bulletpoints">
              <p>{descriptionParagraph.bulletpointsDescription}</p>
              <ul>
                {descriptionParagraph.BulletpointsList.map((bulletpoint) => {
                  return <li> {bulletpoint}</li>;
                })}
              </ul>
            </div>
          );
        }
      })}
    </div>
  )
}

<style>
  .description {
    grid-area: description;

    display: flex;
    flex-direction: column;
    gap: var(--Padding-rem);

    & p,
    li {
      font-weight: 300;
    }

    .description__bulletpoints {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
    }
  }

  .description__card {
    & p,
    li {
      color: var(--text-tertiary);
      font-size: var(--Font-size-Body-Normal);
      line-height: var(--Line-height-Body-Small);
      letter-spacing: 0.01125rem;
    }
    @media (max-width: 1300px) {
      display: none;
    }
  }

  .description__normal {
    & p,
    li {
      color: var(--text-primary);
      font-size: var(--Font-size-Body-Big);
      line-height: var(--Line-height-Body-Big);
    }
  }
</style>
